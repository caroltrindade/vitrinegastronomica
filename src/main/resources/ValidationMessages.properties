javax.validation.constraints.AssertFalse.message     = Deve ser falso.
javax.validation.constraints.AssertTrue.message      = Deve ser verdadeiro.
javax.validation.constraints.DecimalMax.message      = Deve ser menor ${inclusive == true ? 'ou igual a ' : ''}{value}.
javax.validation.constraints.DecimalMin.message      = Deve ser maior ${inclusive == true ? 'ou igual a ' : ''}{value}.
javax.validation.constraints.Digits.message          = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
javax.validation.constraints.Email.message           = Deve ser um email válido.
javax.validation.constraints.Future.message          = Deve ser uma data futura.
javax.validation.constraints.FutureOrPresent.message = Deve ser uma data no presente ou no futuro.
javax.validation.constraints.Max.message             = Deve ser menor ou igual a {value}.
javax.validation.constraints.Min.message             = Deve ser maior ou igual a {value}
javax.validation.constraints.Negative.message        = Deve ser um número negativo (menor que 0).
javax.validation.constraints.NegativeOrZero.message  = Deve ser menor ou igual a 0
javax.validation.constraints.NotBlank.message        = Não pode ficar em branco.
javax.validation.constraints.NotEmpty.message        = Não pode ficar vazio.
javax.validation.constraints.NotNull.message         = Não pode ser nulo.
javax.validation.constraints.Null.message            = Deve ser nulo.
javax.validation.constraints.Past.message            = Deve ser uma data passada.
javax.validation.constraints.PastOrPresent.message   = Deve ser uma data no passado ou no presente.
javax.validation.constraints.Pattern.message         = must match "{regexp}"
javax.validation.constraints.Positive.message        = Deve ser maior que 0
javax.validation.constraints.PositiveOrZero.message  = Deve ser maior ou igual a 0
javax.validation.constraints.Size.message            = O tamanho deve estar entre {min} e {max}

org.hibernate.validator.constraints.CreditCardNumber.message        = invalid credit card number
org.hibernate.validator.constraints.Currency.message                = invalid currency (must be one of {value})
org.hibernate.validator.constraints.EAN.message                     = invalid {type} barcode
org.hibernate.validator.constraints.Email.message                   = Deve ser um email válido.
org.hibernate.validator.constraints.Length.message                  = A quantidade de caracteres deve estar entre {min} e {max}
org.hibernate.validator.constraints.CodePointLength.message         = A quantidade de caracteres deve estar entre {min} e {max}
org.hibernate.validator.constraints.LuhnCheck.message               = The check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message              = The check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message              = The check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message                = The check digit for ${validatedValue} is invalid, ${modType} checksum failed
org.hibernate.validator.constraints.NotBlank.message                = Não pode ficar em branco.
org.hibernate.validator.constraints.NotEmpty.message                = Não pode ficar vazio.
org.hibernate.validator.constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.Range.message                   = Deve estar entre {min} e {max}
org.hibernate.validator.constraints.SafeHtml.message                = may have unsafe html content
org.hibernate.validator.constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.UniqueElements.message          = must only contain unique elements
org.hibernate.validator.constraints.URL.message                     = must be a valid URL

org.hibernate.validator.constraints.br.CNPJ.message                 = CNPJ inválido.
org.hibernate.validator.constraints.br.CPF.message                  = CPF inválido.
org.hibernate.validator.constraints.br.TituloEleitoral.message      = Título eleitoral inválido.

org.hibernate.validator.constraints.pl.REGON.message                = Invalid Polish Taxpayer Identification Number (REGON)
org.hibernate.validator.constraints.pl.NIP.message                  = Invalid VAT Identification Number (NIP)
org.hibernate.validator.constraints.pl.PESEL.message                = Invalid Polish National Identification Number (PESEL)

org.hibernate.validator.constraints.time.DurationMax.message        = must be shorter than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message        = must be longer than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}